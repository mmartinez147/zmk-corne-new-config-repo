/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
// #include <dt-bindings/zmk/rgb.h>
// #include <dt-bindings/led/led.h>



//mt   delay here!!!!!!

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        layer_three {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };



        behaviors{
         gqt: global-quick-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "GLOBAL_QUICK_TAP";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <200>;
                quick-tap-ms = <50>;
                global-quick-tap;
                bindings = <&mo>, <&kp>;
                };
        };
 };

// ADD TAP DANCE FOR SHIFT KEY THAT WHEN DOUBLE TAPPED TURNS INTO CAPS
/{
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                         bindings = <
   &mt LCTRL ESC    &kp Q  &kp W  &kp E  &kp R  &kp T           &kp Y  &kp U  &kp I  &kp O      &kp P      &lt 4 TAB      
   &kp LALT         &kp A  &kp S  &kp D  &kp F  &kp G           &kp H  &kp J  &kp K  &kp L      &kp SEMI   &kp RET
   &sk LSHFT        &kp Z  &kp X  &kp C  &kp V  &kp FSLH        &kp B  &kp N  &kp M  &kp COMMA  &kp DOT    &kp RCMD   
                         &kp LCMD  &gqt 2 SPACE  &sk LSHFT      &mt RSHIFT RET   &gqt 1 BSPC  &kp CAPS                                  
                        >;                                                                                     
                };                                                                                                       

                layer_one {  
                        bindings = <
   &trans  &none   &kp N1  &kp N2  &kp N3  &none          &kp C_VOL_DN  &kp C_VOL_UP  &kp UP    &kp C_PREV      &kp C_PP           &kp C_NEXT 
   &trans  &kp N0  &kp N4  &kp N5  &kp N6  &none          &kp C_MUTE    &kp LEFT      &kp DOWN  &kp RIGHT       &kp C_AC_ZOOM_IN   &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS
   &trans  &none   &kp N7  &kp N8  &kp N9  &none          &kp C_BRI_DN  &kp C_BRI_UP  &trans    &trans          &trans             &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS
                             &trans  &trans   &trans         &trans  &trans  &trans    
                        >;
                };

                layer_two {
                        bindings = <
   &trans  &kp DLLR   &kp AT     &kp HASH   &kp SEMI   &kp PRCNT         &kp PLUS   &kp LPAR  &kp RPAR  &kp APOS   &kp PIPE  &kp STAR 
   &trans  &kp STAR   &kp GRAVE  &kp UNDER  &kp COLON  &kp EXCL          &kp MINUS  &kp LBKT  &kp RBKT  &kp DQT    &kp LT    &kp GT
   &trans  &kp TILDE  &kp DOT    &kp CARET  &kp AMPS   &kp QMARK         &kp EQUAL  &kp LBRC  &kp RBRC  &kp COMMA  &kp FSLH  &kp BSLH
                                             &trans  &trans  &trans      &trans  &trans  &trans
                        >;
                };

                layer_three {
                        bindings = <
   &kp F1  &kp F2    &kp F3   &kp F4   &kp F5         &kp LC(RA(RET))             &kp F7                 &kp F8       &kp F9  &kp F10  &kp F11  &kp F12
   &trans  &trans    &trans   &trans   &kp LG(MINUS)  &kp LC(RA(LEFT))            &kp LC(RA(RIGHT))      &kp LG(PLUS) &trans  &trans   &trans   &trans  
   &trans  &trans    &trans   &trans   &kp CAPS       &kp LG(LS(NUMBER_3))        &kp LG(LS(NUMBER_4))   &trans       &trans  &trans   &trans   &ext_power EP_TOG  
                              &trans   &trans         &trans                      &trans  &trans   &trans
                        >;
                }; 

                layer_four {
                        bindings = <
   &trans  &trans    &trans   &trans   &trans   &trans       &trans  &trans   &trans   &trans   &trans   &trans 
   &trans  &trans    &trans   &trans   &trans   &trans       &trans  &trans   &trans   &trans   &trans   &trans 
   &trans  &trans    &trans   &trans   &trans   &trans       &trans  &trans   &trans   &trans   &trans   &ext_power EP_TOG  
                              &trans   &trans   &trans       &trans  &trans   &trans
                        >;
                };                           
        };
};